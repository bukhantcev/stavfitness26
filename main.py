import asyncio, re, json, io, textwrap
from datetime import datetime, time, timedelta
from typing import Optional, Dict, Any, Tuple, List

import aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.filters import Command, CommandObject
from aiogram.enums.parse_mode import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
import os
import inspect

# ---------- CONFIG ----------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHANNEL_ID = os.getenv("CHANNEL_ID")

# OpenAI client
from openai import OpenAI, PermissionDeniedError

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø–æ–ª–Ω–∏ .env —Å OPENAI_API_KEY=sk-...")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø–æ–ª–Ω–∏ .env —Å BOT_TOKEN=...")
if not CHANNEL_ID:
    raise RuntimeError("CHANNEL_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏ @username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID, –∏ —Å–¥–µ–ª–∞–π –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –ø–æ –Ω–æ–≤–æ–º—É SDK (–∫–ª—é—á –≤–æ–∑—å–º—ë—Ç—Å—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
oai = OpenAI()

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ–º–µ–Ω—è–π

DB_PATH = "fitness_bot.db"

# ---------- DB ----------
CREATE_TABLES_SQL = """
CREATE TABLE IF NOT EXISTS studio (
  id INTEGER PRIMARY KEY CHECK (id=1),
  profile_json TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS settings (
  id INTEGER PRIMARY KEY CHECK (id=1),
  daily_time TEXT    -- 'HH:MM'
);
CREATE TABLE IF NOT EXISTS drafts (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  kind TEXT,          -- —Ç–∏–ø –ø–æ—Å—Ç–∞ (offer, tip, schedule, review, motivation etc)
  text TEXT,
  image_prompt TEXT,
  created_at TEXT
);
"""

DEFAULT_PROFILE = {
    "name": "STAVFITNESS26",
    "address": "—É–ª. –ü–∏—Ä–æ–≥–æ–≤–∞ 15/2, 3 —ç—Ç–∞–∂",
    "phone": "+7 988 703-20-14",
    "services": ["–ø–∏–ª–∞—Ç–µ—Å", "—Å—Ç—Ä–µ–π—á–∏–Ω–≥", "–∑–¥–æ—Ä–æ–≤–∞—è —Å–ø–∏–Ω–∞", "dance –∞—ç—Ä–æ–±–∏–∫–∞", "—Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
    "tone": "–¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã, —Å —ç–º–æ–¥–∑–∏",
    "hashtags": ["#–ø–∏–ª–∞—Ç–µ—Å", "#—Å—Ç—Ä–µ–π—á–∏–Ω–≥", "#—Å—Ç–∞–≤—Ä–æ–ø–æ–ª—å", "#—Ñ–æ—Ä–º–∞", "#–∑–¥–æ—Ä–æ–≤–∞—è—Å–ø–∏–Ω–∞", "#—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"],
    "offers": [
        "–°–∫–∏–¥–∫–∞ 10% –ø–æ —Ñ–ª–∞–µ—Ä—É",
        "–ü—Ä–æ–±–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ –∑–∞–ø–∏—Å–∏"
    ],
    "brand_words": ["STAVFITNESS26", "—Å–∏–ª—å–Ω–æ–µ —Ç–µ–ª–æ", "–∑–¥–æ—Ä–æ–≤–∞—è –æ—Å–∞–Ω–∫–∞", "–∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞","—Ç–≤–æ—ë —Ç–µ–ª–æ, —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ, —Ç–≤–æ—è –≥–∞—Ä–º–æ–Ω–∏—è"],
    "image_style": "—Å–≤–µ—Ç–ª—ã–π –∑–∞–ª, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–≤–µ—Ç, –¥–∏–Ω–∞–º–∏–∫–∞, —É–ª—ã–±–∞—é—â–∏–µ—Å—è –ª—é–¥–∏, 3:4, –∏—Å–∫–ª—é—á–∏—Ç—å —á–µ—Ä–Ω–æ–∫–æ–∂–∏—Ö –∏ –∞–∑–∏–∞—Ç–æ–≤"
}

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.executescript(CREATE_TABLES_SQL)
        await db.commit()
        # ensure profile exists
        cur = await db.execute("SELECT profile_json FROM studio WHERE id=1")
        row = await cur.fetchone()
        if not row:
            await db.execute("INSERT INTO studio (id, profile_json) VALUES (1, ?)", (json.dumps(DEFAULT_PROFILE, ensure_ascii=False),))
            await db.commit()

async def get_profile() -> Dict[str, Any]:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT profile_json FROM studio WHERE id=1")
        row = await cur.fetchone()
        return json.loads(row[0]) if row else DEFAULT_PROFILE

async def set_profile(profile: Dict[str, Any]):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE studio SET profile_json=? WHERE id=1", (json.dumps(profile, ensure_ascii=False),))
        await db.commit()

async def get_daily_time() -> Optional[str]:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT daily_time FROM settings WHERE id=1")
        row = await cur.fetchone()
        return row[0] if row and row[0] else None

async def set_daily_time(hhmm: Optional[str]):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id FROM settings WHERE id=1")
        row = await cur.fetchone()
        if row:
            await db.execute("UPDATE settings SET daily_time=? WHERE id=1", (hhmm,))
        else:
            await db.execute("INSERT INTO settings (id, daily_time) VALUES (1, ?)", (hhmm,))
        await db.commit()

async def add_draft(kind: str, text: str, image_prompt: Optional[str]):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO drafts (kind, text, image_prompt, created_at) VALUES (?, ?, ?, ?)",
            (kind, text, image_prompt or "", datetime.now().isoformat())
        )
        await db.commit()

async def get_latest_draft() -> Optional[Tuple[int, str, str, str]]:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id, kind, text, image_prompt FROM drafts ORDER BY id DESC LIMIT 1")
        return await cur.fetchone()

# ---------- OPENAI HELPERS ----------
GEN_SYSTEM = """–¢—ã ‚Äî SMM-—Ä–µ–¥–∞–∫—Ç–æ—Ä —Ñ–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–∏. –ü–∏—à–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ—á–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è Telegram:
‚Äî —Å—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã; 350‚Äì700 —Å–∏–º–≤–æ–ª–æ–≤;
‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ 1‚Äì2 —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –∞–±–∑–∞—Ü–µ–≤, 3‚Äì6 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤ –≤ –∫–æ–Ω—Ü–µ;
‚Äî —è–≤–Ω—ã–π CTA: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è/–Ω–∞–ø–∏—Å–∞—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç/–≤ –¢–µ–ª–µ–≥—Ä–∞–º; –±–µ–∑ ‚Äú–≤—ã–∫–∞—Ç—ã–≤–∞–µ–º‚Äù –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞;
‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown —Å—Å—ã–ª–∫–∏, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç; –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫ –∏ CAPS LOCK.
"""

def build_user_prompt(profile: Dict[str, Any], kind: str, extra: str = "") -> str:
    services = ", ".join(profile["services"])
    hashtags = " ".join(profile["hashtags"])
    offers = "; ".join(profile["offers"])
    brand = ", ".join(profile["brand_words"])
    tone = profile["tone"]
    base = f"""–î–∞–Ω–æ:
- –°—Ç—É–¥–∏—è: {profile["name"]}
- –ê–¥—Ä–µ—Å: {profile["address"]}
- –¢–µ–ª–µ—Ñ–æ–Ω: {profile["phone"]}
- –£—Å–ª—É–≥–∏: {services}
- –û—Ñ—Ñ–µ—Ä—ã: {offers}
- –°–ª–æ–≤–∞ –±—Ä–µ–Ω–¥–∞: {brand}
- –¢–æ–Ω: {tone}

–ó–∞–¥–∞—á–∞: –ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç —Ç–∏–ø–∞ "{kind}" –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ —Å—Ç—É–¥–∏–∏. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Ö–µ—à—Ç–µ–≥–∏: {hashtags}.
–ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –≤—Å—Ç–∞–≤—å —è–≤–Ω—ã–π –æ—Ñ—Ñ–µ—Ä (–Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞). –£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å/—Å–≤—è–∑—å –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ.
–î–æ–ø. —É—Å–ª–æ–≤–∏—è: {extra}
"""
    return base

async def generate_post(profile: Dict[str, Any], kind: str, extra: str = "") -> str:
    prompt = build_user_prompt(profile, kind, extra)
    resp = oai.chat.completions.create(
        model="gpt-4.1-mini",
        messages=[
            {"role": "system", "content": GEN_SYSTEM},
            {"role": "user", "content": prompt}
        ],
        temperature=0.8,
    )
    return resp.choices[0].message.content.strip()

async def generate_image_bytes(image_prompt: str) -> Tuple[Optional[bytes], Optional[str]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG —á–µ—Ä–µ–∑ OpenAI Images –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (data, error).
    –ü—Ä–∏ 403 (–Ω—É–∂–Ω–∞ Verify Organization) –¥–µ–ª–∞–µ–º —Ñ–æ–ª–±—ç–∫ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏.
    """
    if not image_prompt:
        return None, None
    try:
        img = oai.images.generate(
            model="gpt-image-1",
            prompt=image_prompt,
            size="1024x1024"
        )
        b64 = img.data[0].b64_json
        import base64
        return base64.b64decode(b64), None
    except PermissionDeniedError as e:
        return None, (
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏ gpt-image-1: –Ω—É–∂–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ platform.openai.com (Settings ‚Üí Organization ‚Üí Verify). "
            "–°–¥–µ–ª–∞–ª —Ñ–æ–ª–±—ç–∫: –ø—É–±–ª–∏–∫—É–µ–º –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
        )
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"

# ---------- UI ----------
def post_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="approve")],
        [InlineKeyboardButton(text="üé≤ –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="regen"),
         InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å", callback_data="edit")],
        [InlineKeyboardButton(text="üñº –°–≥–µ–Ω–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="image")]
    ])
    return kb

def only_admin(func):
    async def wrapper(event, *args, **kwargs):
        uid = event.from_user.id if isinstance(event, Message) else event.from_user.id
        if uid != ADMIN_ID:
            return await (event.answer if isinstance(event, Message) else event.message.answer)("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π —Ö—ç–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ —Ç–µ kwargs, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, command)
        sig = inspect.signature(func)
        allowed_kwargs = {k: v for k, v in kwargs.items() if k in sig.parameters}
        return await func(event, *args, **allowed_kwargs)
    return wrapper

# ---------- COMMANDS ----------
@dp.message(Command("start"))
@only_admin
async def start_cmd(m: Message, command: CommandObject):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø SMM‚Äë–±–æ—Ç —Å—Ç—É–¥–∏–∏. /setup ‚Äî –ø—Ä–æ—Ñ–∏–ª—å, /draft ‚Äî —á–µ—Ä–Ω–æ–≤–∏–∫, /schedule HH:MM ‚Äî –∞–≤—Ç–æ–ø–æ—Å—Ç, /plan_week ‚Äî –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–ø–ª–∞–Ω, /status.")

@dp.message(Command("setup"))
@only_admin
async def setup_cmd(m: Message, command: CommandObject):
    """
    –ü—Ä–∏–º–µ—Ä:
    /setup name=StavFitness; address=—É–ª. –ü–∏—Ä–æ–≥–æ–≤–∞ 15/2, 3 —ç—Ç–∞–∂; phone=+7988...; services=–ø–∏–ª–∞—Ç–µ—Å,—Å—Ç—Ä–µ–π—á–∏–Ω–≥; hashtags=#–ø–∏–ª–∞—Ç–µ—Å,#—Å—Ç—Ä–µ–π—á–∏–Ω–≥; offers=–°–∫–∏–¥–∫–∞ 10%,–ü—Ä–æ–±–Ω–∞—è; tone=–¥—Ä—É–∂–µ–ª—é–±–Ω–æ
    """
    prof = await get_profile()
    if command.args:
        # –ø–∞—Ä—Å–∏–º key=value; key=value; ...
        pairs = [p.strip() for p in command.args.split(";") if p.strip()]
        for pair in pairs:
            if "=" in pair:
                k, v = [x.strip() for x in pair.split("=", 1)]
                if k in ["services", "hashtags", "offers", "brand_words"]:
                    prof[k] = [x.strip() for x in re.split(r"[;,]", v) if x.strip()]
                else:
                    prof[k] = v
    await set_profile(prof)
    pretty = textwrap.dedent(f"""
    –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω:
    ‚Ä¢ name: {prof['name']}
    ‚Ä¢ address: {prof['address']}
    ‚Ä¢ phone: {prof['phone']}
    ‚Ä¢ services: {', '.join(prof['services'])}
    ‚Ä¢ offers: {', '.join(prof['offers'])}
    ‚Ä¢ tone: {prof['tone']}
    ‚Ä¢ hashtags: {' '.join(prof['hashtags'])}
    """).strip()
    await m.answer(pretty)

@dp.message(Command("draft"))
@only_admin
async def draft_cmd(m: Message, command: CommandObject):
    """
    /draft kind=offer|tip|schedule|motivation|review|news; extra=–ø—Ä–æ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø–æ –ø–∏–ª–∞—Ç–µ—Å—É
    """
    prof = await get_profile()
    kind = "offer"
    extra = ""
    if command.args:
        # –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –ø–∞—Ä—Å–µ—Ä
        parts = [p.strip() for p in command.args.split(";") if p.strip()]
        for part in parts:
            if part.startswith("kind="):
                kind = part.split("=",1)[1].strip()
            elif part.startswith("extra="):
                extra = part.split("=",1)[1].strip()
    text = await generate_post(prof, kind, extra)
    await add_draft(kind, text, image_prompt=None)
    await m.answer(f"<b>–ß–µ—Ä–Ω–æ–≤–∏–∫ ({kind}):</b>\n\n{text}", reply_markup=post_kb())

@dp.message(Command("schedule"))
@only_admin
async def schedule_cmd(m: Message, command: CommandObject):
    """
    /schedule 10:00  ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è
    /schedule off     ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å
    """
    if not command.args:
        hhmm = await get_daily_time()
        return await m.answer(f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {hhmm or '–Ω–µ—Ç'}")
    arg = command.args.strip().lower()
    if arg == "off":
        await set_daily_time(None)
        reschedule_daily(None)
        return await m.answer("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞.")
    if not re.match(r"^\d{2}:\d{2}$", arg):
        return await m.answer("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä. 10:00)")
    await set_daily_time(arg)
    reschedule_daily(arg)
    await m.answer(f"–ì–æ—Ç–æ–≤–æ. –ë—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {arg}.")

@dp.message(Command("plan_week"))
@only_admin
async def plan_week_cmd(m: Message, command: CommandObject):
    prof = await get_profile()
    kinds = ["offer", "tip", "schedule", "motivation", "review", "news", "tip"]
    await m.answer("–ì–µ–Ω–µ—Ä—é 7 —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é‚Ä¶")
    for k in kinds:
        text = await generate_post(prof, k, "")
        await add_draft(k, text, image_prompt=None)
        await m.answer(f"<b>–ß–µ—Ä–Ω–æ–≤–∏–∫ ({k}):</b>\n\n{text}", reply_markup=post_kb())

@dp.message(Command("status"))
@only_admin
async def status_cmd(m: Message, command: CommandObject):
    prof = await get_profile()
    hhmm = await get_daily_time()
    await m.answer(
        textwrap.dedent(f"""
        –°—Ç–∞—Ç—É—Å:
        ‚Ä¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}
        ‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç: {hhmm or '–≤—ã–∫–ª'}
        ‚Ä¢ –°—Ç—É–¥–∏—è: {prof['name']} | –¢–æ–Ω: {prof['tone']}
        ‚Ä¢ –•—ç—à—Ç–µ–≥–∏: {' '.join(prof['hashtags'])}
        """).strip()
    )

# ---------- CALLBACKS ----------
@dp.callback_query(F.data.in_({"approve","regen","edit","image"}))
async def on_cb(q: CallbackQuery):
    if q.from_user.id != ADMIN_ID:
        return await q.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.", show_alert=True)
    draft = await get_latest_draft()
    if not draft:
        return await q.message.answer("–ù–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞.")
    draft_id, kind, text, image_prompt = draft

    # Immediately answer the callback to avoid timeout
    await _safe_cb_answer(q, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶")

    if q.data == "approve":
        await publish_to_channel(text, None)
        return await q.message.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ")

    if q.data == "regen":
        prof = await get_profile()
        new_text = await generate_post(prof, kind, "—Å–¥–µ–ª–∞–π –¥—Ä—É–≥–æ–π —É–≥–æ–ª –∏ –ø–æ–¥–∞—á—É")
        await add_draft(kind, new_text, image_prompt=None)
        return await q.message.answer(f"<b>–ß–µ—Ä–Ω–æ–≤–∏–∫ ({kind}) ‚Äî –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</b>\n\n{new_text}", reply_markup=post_kb())

    if q.data == "edit":
        await q.message.answer("–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –æ–ø—É–±–ª–∏–∫—É—é –µ–≥–æ.")
        dp.message.register(one_shot_publish)
        return

    if q.data == "image":
        prof = await get_profile()
        img_prompt = f"–§–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏—è {prof['name']}, {prof['image_style']}. –ê–∫—Ü–µ–Ω—Ç: {', '.join(prof['services'][:2])}"
        data, err = await generate_image_bytes(img_prompt)
        if err:
            await publish_to_channel(text, None)
            return await q.message.answer("–ü–æ—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ‚úÖ\n\n" + err)
        if not data:
            return await q.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", show_alert=True)
        await publish_to_channel(text, data)
        return await q.message.answer("–ü–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ‚úÖ")

async def one_shot_publish(m: Message):
    # —Å–Ω–∏–º–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    dp.message.unregister(one_shot_publish)
    await publish_to_channel(m.html_text, None)
    await m.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ‚úÖ")

# ---------- PUBLISH ----------
async def publish_to_channel(text: str, image_bytes: Optional[bytes]):
    if image_bytes:
        await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=BufferedInputFile(image_bytes, filename="post.png"),
            caption=text
        )
    else:
        await bot.send_message(chat_id=CHANNEL_ID, text=text)


# ---------- HELPERS ----------
# Helper to safely answer callback queries (avoid late answer errors)
async def _safe_cb_answer(q: CallbackQuery, text: str | None = None, show_alert: bool = False):
    try:
        await q.answer(text or "", show_alert=show_alert)
    except Exception:
        pass

# ---------- SCHEDULER ----------
def reschedule_daily(hhmm: Optional[str]):
    # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
    for job in scheduler.get_jobs():
        job.remove()
    if not hhmm:
        return
    h, m = map(int, hhmm.split(":"))
    trigger = CronTrigger(hour=h, minute=m)
    scheduler.add_job(func=scheduled_job, trigger=trigger, id="daily_post")

async def scheduled_job():
    prof = await get_profile()
    # —Ä–æ—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –ø–æ—Å—Ç–æ–≤ –ø–æ –∫—Ä—É–≥—É
    kinds_cycle = ["offer","tip","schedule","motivation","review","news"]
    kind = kinds_cycle[datetime.now().weekday() % len(kinds_cycle)]
    text = await generate_post(prof, kind, "–∫–æ—Ä–æ—Ç–∫–æ, –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á—Ç–µ–Ω–∏—è")
    await publish_to_channel(text, None)

# ---------- ENTRY ----------
async def main():
    await init_db()
    # –ø–æ–¥–Ω–∏–º–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑ –ë–î
    hhmm = await get_daily_time()
    reschedule_daily(hhmm)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())